.\" Automatically generated by Pod::Man 2.120 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::Rotation 3"
.TH Math::Rotation 3 "2007-04-09" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::Rotation \- Perl class to represent rotations
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Math::Rotation;
\& my $r = new Math::Rotation;  # Make a new unit rotation
\& 
\& # Make a rotation about the axis (0,1,0)
\& my $r2 = new Math::Rotation([0,1,0], 0.1);
\& my $r3 = new Math::Rotation(1, 2, 3, 4);
\&
\& my $fromVector = [1,2,3];
\& my $toVector = [2,3,4];
\& my $r4 = new Math::Rotation($fromVector, $toVector);
\&
\& my $r5 = $r2 * $r3;
\& my $r6 = ~$r5;
.Ve
.SH "DESCRIPTION =head1 METHODS"
.IX Header "DESCRIPTION =head1 METHODS"
.IP "\fBnew\fR" 1
.IX Item "new"
.Vb 4
\& my $r = new Math::Rotation;                   # Make a new unit rotation.
\& my $r2 = new Math::Rotation(1,2,3,4);         # (x,y,z, angle)
\& my $r3 = new Math::Rotation([1,2,3],4);       # (axis, angle)
\& my $r3 = new Math::Rotation([1,2,3],[1,2,3]); # (fromVec, toVec)
\&
\& my $r5 = new_from_quaternion Math::Rotation(new Math::Quaternion);
.Ve
.IP "\fBsetX(x)\fR Sets the first value of the axis vector" 1
.IX Item "setX(x) Sets the first value of the axis vector"
.PD 0
.IP "\fBsetY(y)\fR Sets the second value of the axis vector" 1
.IX Item "setY(y) Sets the second value of the axis vector"
.IP "\fBsetZ(z)\fR Sets the third value of the axis vector" 1
.IX Item "setZ(z) Sets the third value of the axis vector"
.ie n .IP "\fBsetAxis(x,y,z)\fR Sets axis of rotation from a 3 components @array." 1
.el .IP "\fBsetAxis(x,y,z)\fR Sets axis of rotation from a 3 components \f(CW@array\fR." 1
.IX Item "setAxis(x,y,z) Sets axis of rotation from a 3 components @array."
.IP "\fBsetAngle(angle)\fR Sets angle of rotation in radiants." 1
.IX Item "setAngle(angle) Sets angle of rotation in radiants."
.IP "\fBsetAxisAngle(x,y,z, angle)\fR Sets value of rotation from axis angle." 1
.IX Item "setAxisAngle(x,y,z, angle) Sets value of rotation from axis angle."
.IP "\fBsetQuaternion(Math::Quaternion)\fR Sets value of rotation from a quaternion." 1
.IX Item "setQuaternion(Math::Quaternion) Sets value of rotation from a quaternion."
.IP "\fBgetX\fR Returns the first value of the axis vector." 1
.IX Item "getX Returns the first value of the axis vector."
.IP "\fBgetX\fR Returns the second value of the axis vector." 1
.IX Item "getX Returns the second value of the axis vector."
.IP "\fBgetX\fR Returns the third value of the axis vector" 1
.IX Item "getX Returns the third value of the axis vector"
.ie n .IP "\fBgetAxis\fR Returns the axis of rotation as an @array." 1
.el .IP "\fBgetAxis\fR Returns the axis of rotation as an \f(CW@array\fR." 1
.IX Item "getAxis Returns the axis of rotation as an @array."
.IP "\fBgetAngle\fR Returns corresponding 3D rotation angle in radians." 1
.IX Item "getAngle Returns corresponding 3D rotation angle in radians."
.IP "\fBgetAxisAngle\fR Returns corresponding 3D rotation (x, y, z, angle)." 1
.IX Item "getAxisAngle Returns corresponding 3D rotation (x, y, z, angle)."
.IP "\fBgetQuaternion\fR Returns corresponding Math::Quaternion." 1
.IX Item "getQuaternion Returns corresponding Math::Quaternion."
.IP "\fBinverse\fR Returns a Math::Rotation object whose value is the inverse of this object's rotation." 1
.IX Item "inverse Returns a Math::Rotation object whose value is the inverse of this object's rotation."
.IP "\fBmultiply(Math::Rotation)\fR Returns an Math::Rotation whose value is the object multiplied by the passed Math::Rotation." 1
.IX Item "multiply(Math::Rotation) Returns an Math::Rotation whose value is the object multiplied by the passed Math::Rotation."
.ie n .IP "\fBmultVec(x,y,z)\fR Returns an @array whose value is the 3D vector (x,y,z) multiplied by the matrix corresponding to this object's rotation." 1
.el .IP "\fBmultVec(x,y,z)\fR Returns an \f(CW@array\fR whose value is the 3D vector (x,y,z) multiplied by the matrix corresponding to this object's rotation." 1
.IX Item "multVec(x,y,z) Returns an @array whose value is the 3D vector (x,y,z) multiplied by the matrix corresponding to this object's rotation."
.IP "\fBslerp(destRotation, t)\fR Returns a Math::Rotation object whose value is the spherical linear interpolation between this object's rotation and destRotation at value 0 <= t <= 1. For t = 0, the value is this object's rotation. For t = 1, the value is destRotation." 1
.IX Item "slerp(destRotation, t) Returns a Math::Rotation object whose value is the spherical linear interpolation between this object's rotation and destRotation at value 0 <= t <= 1. For t = 0, the value is this object's rotation. For t = 1, the value is destRotation."
.ie n .IP "\fBstringify\fR Returns a string representation of the rotation. This is used to overload the '""""' operator, so that rotations may be freely interpolated in strings." 1
.el .IP "\fBstringify\fR Returns a string representation of the rotation. This is used to overload the '``''' operator, so that rotations may be freely interpolated in strings." 1
.IX Item "stringify Returns a string representation of the rotation. This is used to overload the '""""' operator, so that rotations may be freely interpolated in strings."
.PD
.Vb 3
\&        my $q = new Math::Rotation(1,2,3,4);
\&        print $q\->stringify;                # "1 2 3 4"
\&        print "$q";                         # "1 2 3 4"
.Ve
